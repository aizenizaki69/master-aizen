private void ShowServer(){
        final BottomSheetDialog bottomSheetDialog = new BottomSheetDialog(this);
        bottomSheetDialog.setContentView(R.layout.server_list);      
        bottomSheetDialog.setCancelable(true);
        ServerAdapter mAdapter = new ServerAdapter(this, prefs.getInt("ServerPos",0) , serverList);
        RecyclerView recyclerView = (RecyclerView)bottomSheetDialog.findViewById(R.id.recycler_view);
        LinearLayoutManager mLayoutManager = new LinearLayoutManager(this);             
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(mLayoutManager); 
        recyclerView.scrollToPosition(prefs.getInt("ServerPos", 0));        
        recyclerView.setAdapter(mAdapter);
        recyclerView.addOnItemTouchListener(new RecyclerTouchListener(this, 
                                                recyclerView, new RecyclerTouchListener.ClickListener() {

                                                    @Override                                                           
                                                    public void onClick(View view, int p3) {
                                                        prefs.edit().putInt("ServerPos", p3).commit();              
                                                        parseSelectedServer(p3);
                                                        SUpdateView();                                          
                                                        bottomSheetDialog.dismiss();

                                                    }                                                                                
                                                    @Override                                                                        
                                                    public void onLongClick(View view, int position) {}                                                                              
                                                }));
        bottomSheetDialog.show();
    }
    private void ShowPayload(){
        final BottomSheetDialog bottomSheetDialog = new BottomSheetDialog(this);       
        bottomSheetDialog.setContentView(R.layout.payload_list);         
        bottomSheetDialog.setCancelable(true);
        PayloadAdapter tweakAdapt = new PayloadAdapter(this, prefs.getInt("TweakPos", 0) , payloadList);
        final RecyclerView recyclerView = (RecyclerView)bottomSheetDialog.findViewById(R.id.recycler_view);
        LinearLayoutManager mLayoutManager = new LinearLayoutManager(this);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(mLayoutManager);       
        recyclerView.scrollToPosition(prefs.getInt("TweakPos", 0)); 
        recyclerView.setAdapter(tweakAdapt);
        recyclerView.addOnItemTouchListener(new RecyclerTouchListener(this, 
                                                recyclerView, new RecyclerTouchListener.ClickListener() {   

                                                    @Override                                                                                    
                                                    public void onClick(View view, int p3) {                                                     
                                                        prefs.edit().putInt("TweakPos",p3).commit();
                                                        parseSelectedNetwork(p3);                                 
                                                        PUpdateView();                                                
                                                        bottomSheetDialog.dismiss();                                                  
                                                    }                                                           
                                                    @Override                                               
                                                    public void onLongClick(View view, int position) {}                                         
                                                }));
        bottomSheetDialog.show();
    }
    private void parseSelectedServer(int pos1){
        try {
            if (pos1 == 0) {                
                JSONArray jarr = config.getServersArray();
                JSONObject obj = jarr.getJSONObject(Utils.nextIntInRange(0, jarr.length(), new Random()));
                prefs.edit().putString("SSHName", "Random").apply();
                prefs.edit().putString(Settings.SERVIDOR_KEY, obj.getString("ServerIP")).apply();
                prefs.edit().putString("SSH_Port" ,obj.getString("ServerPort")).apply();
                prefs.edit().putString("SSL_Port" ,obj.getString("SSLPort")).apply();                                           
                prefs.edit().putString(Settings.PROXY_IP_KEY, obj.getString("ProxyIP")).apply();
                prefs.edit().putString(Settings.PROXY_PORTA_KEY, obj.getString("ProxyPort")).apply();   
                prefs.edit().putString(Settings.USUARIO_KEY, obj.getString("ServerUser")).apply();
                prefs.edit().putString(Settings.SENHA_KEY, obj.getString("ServerPass")).apply();            
            } else {
                JSONArray jarr = config.getServersArray();
                JSONObject obj = jarr.getJSONObject(pos1-1);                    
                prefs.edit().putString("SSHName", obj.getString("Name")).apply();
                prefs.edit().putString(Settings.SERVIDOR_KEY, obj.getString("ServerIP")).apply();
                prefs.edit().putString("SSH_Port" ,obj.getString("ServerPort")).apply();
                prefs.edit().putString("SSL_Port" ,obj.getString("SSLPort")).apply();                                   
                prefs.edit().putString(Settings.PROXY_IP_KEY, obj.getString("ProxyIP")).apply();
                prefs.edit().putString(Settings.PROXY_PORTA_KEY, obj.getString("ProxyPort")).apply();
                prefs.edit().putString(Settings.USUARIO_KEY, obj.getString("ServerUser")).apply();
                prefs.edit().putString(Settings.SENHA_KEY, obj.getString("ServerPass")).apply();
            }
        } catch (JSONException e){  
            e.printStackTrace();            
        }
    }
    private void parseSelectedNetwork(int pos2) {   
        try {
            if(pos2 == 0){     
                prefs.edit().putInt(Settings.TUNNELTYPE_KEY, Settings.bTUNNEL_TYPE_SSH_PROXY).apply();
                prefs.edit().putBoolean("isSSL_2", false).apply();
                prefs.edit().putString("TweakName", "Direct").apply();      
                String Payload = "CONNECT [host_port] [protocol][crlf]Host: edge-star-shv-01-any2.facebook.com[crlf]X-Online-Host: edge-star-shv-01-any2.facebook.com[crlf]X-Forward-Host: edge-star-shv-01-any2.facebook.com[crlf]Connection: Keep-Alive[crlf][crlf]";
                prefs.edit().putString(Settings.CUSTOM_PAYLOAD_KEY, Payload).apply();
            } else {
                JSONArray jarr = config.getNetworksArray();                                                        
                JSONObject obj = jarr.getJSONObject(pos2-1);
                prefs.edit().putString("TweakName" ,obj.getString("Name")).apply();
                boolean isSSL = obj.getBoolean("isSSL");           
                boolean PAYSSL = obj.getBoolean("PAYSSL");         
                if (isSSL) {   
                    prefs.edit().putInt(Settings.TUNNELTYPE_KEY, Settings.bTUNNEL_TYPE_SSH_SSL).apply();
                    prefs.edit().putBoolean("isSSL_2", obj.getBoolean("isSSL")).apply();
                    prefs.edit().putString(Settings.CUSTOM_PAYLOAD_KEY, obj.getString("SNI")).apply();
                } else if (PAYSSL){    
                   // prefs.edit().putInt(Settings.TUNNELTYPE_KEY, Settings.bTUNNEL_TYPE_PAY_SSL).apply();                
                   // prefs.edit().putBoolean("isSSL_2", obj.getBoolean("isSSL")).apply();
                   // prefs.edit().putString(Settings.CUSTOM_PAYLOAD_KEY, obj.getString("Payload")).apply();
                   // prefs.edit().putString(Settings.CUSTOM_SNI, obj.getString("SNI")).apply();
                } else {   
                    prefs.edit().putInt(Settings.TUNNELTYPE_KEY, Settings.bTUNNEL_TYPE_SSH_PROXY).apply();
                    prefs.edit().putBoolean("isSSL_2", obj.getBoolean("isSSL")).apply();
                    prefs.edit().putString(Settings.CUSTOM_PAYLOAD_KEY, obj.getString("Payload")).apply();
                }  
            }
        } catch (JSONException e){
            e.printStackTrace();
        }
    }
    private void loadServer() {
        try { 
            HashMap<String, String> mapp = new HashMap<String, String>();
            mapp.put("Name", "Random");
            mapp.put("FLAG", "ic_launcher.png");
            serverList.add(mapp);
            for (int i = 0; i < config.getServersArray().length(); i++) {
                JSONObject obj = config.getServersArray().getJSONObject(i);
                HashMap<String, String> map = new HashMap<String, String>();
                map.put("Name", obj.getString("Name"));
                map.put("FLAG", obj.getString("FLAG")+".png");
                serverList.add(map);                
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private void loadNetworks() {       
        try {  
            HashMap<String, String> mapp = new HashMap<String, String>();
            mapp.put("Name", "Direct");
            mapp.put("Network", "ic_launcher.png");
            payloadList.add(mapp);
            for (int i = 0; i < config.getNetworksArray().length(); i++) {
                JSONObject obj = config.getNetworksArray().getJSONObject(i);           
                HashMap<String, String> map = new HashMap<String, String>();
                map.put("Name", obj.getString("Name"));
                map.put("Network", obj.getString("Network")+".png");
                payloadList.add(map);
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
    private void SUpdateView() {
        try {       
            Sname.setText(prefs.getString("SSHName","Random"));
            InputStream inputStream = getApplicationContext().getAssets().open("flags/" + serverList.get(prefs.getInt("ServerPos", 0)).get("FLAG"));            
            Sicon.setImageDrawable(Drawable.createFromStream(inputStream, serverList.get(prefs.getInt("ServerPos", 0)).get("FLAG")));           
            if (inputStream != null) {          
                inputStream.close();
            }
        }catch (Exception e) {
            e.printStackTrace();
        }                                                             
    }

    private void PUpdateView() {        
        try {       
            Pname.setText(prefs.getString("TweakName","Direct"));
            InputStream inputStream = getApplicationContext().getAssets().open("network/" + payloadList.get(prefs.getInt("TweakPos", 0)).get("Network"));           
            Picon.setImageDrawable(Drawable.createFromStream(inputStream, payloadList.get(prefs.getInt("TweakPos", 0)).get("Network")));            
            if (inputStream != null) {          
                inputStream.close();
            }
        }catch (Exception e) {
            e.printStackTrace();
        }                                                                   
    }
    private synchronized void doSaveData() {                   
        if (mainLayout != null && !isFinishing()){
            mainLayout.requestFocus();
        } 
        parseSelectedServer(prefs.getInt("ServerPos", 0));
        parseSelectedNetwork(prefs.getInt("TweakPos", 0));

        if (!prefs.getBoolean("isSSL_2", false)) {          
            String ssh_port = prefs.getString("SSH_Port","");                               
            prefs.edit().putString(Settings.SERVIDOR_PORTA_KEY, ssh_port).apply();
        } else {
            String ssl_port = prefs.getString("SSL_Port","");   
            prefs.edit().putString(Settings.SERVIDOR_PORTA_KEY, ssl_port).apply();
        }   
    }
